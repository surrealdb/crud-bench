name: Custom

on:
  workflow_dispatch:
    inputs:
      datastore:
        type: choice
        description: Datastore
        required: true
        options:
          - all
          - arangodb
          - cassandra
          - dragonfly
          - dry
          - keydb
          - map
          - lmdb
          - mongodb
          - mysql
          - neo4j
          - postgres
          - redb
          - redis
          - rocksdb
          - scylladb
          - sqlite
          - surrealdb
          - surrealkv
      samples:
        type: string
        description: Number of samples
        required: true
        default: "5000000"
      clients:
        type: string
        description: Number of clients
        required: true
        default: "128"
      threads:
        type: string
        description: Number of threads
        required: true
        default: "64"
      key-type:
        type: choice
        description: Primary key type
        required: true
        default: "string26"
        options:
          - integer
          - string26
          - string90
          - string250
          - string506
      value:
        type: string
        description: Item content
        required: true
        default: '{ "text": "text:50", "integer": "int", "nested": { "text": "text:1000", "array": [ "string:50", "string:50", "string:50", "string:50", "string:50" ] } }'

concurrency:
  # Use github.run_id on main branch
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # Use github.ref on other branches, so it's unique per branch
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build crud-bench
    runs-on: [ runner-amd64-2xlarge ]
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Build benchmark
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Store artifacts
        run: cp target/x86_64-unknown-linux-gnu/release/crud-bench crud-bench

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crud-bench
          path: crud-bench

  benchmark:
    name: Benchmark ${{ matrix.description }}
    needs: build
    runs-on: [ runner-amd64-4xlarge ]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # ArangoDB
          - name: arangodb
            database: arangodb
            enabled: true
            description: ArangoDB
          # Cassandra
          - name: cassandra
            database: cassandra
            enabled: false
            description: Cassandra
            skipped: Cassandra benchmark not yet implemented
          # Dragonfly
          - name: dragonfly
            database: dragonfly
            enabled: true
            description: Dragonfly
          # Dry
          - name: dry
            database: dry
            enabled: true
            description: Dry
          # KeyDB
          - name: keydb
            database: keydb
            enabled: true
            description: KeyDB
          # Map
          - name: map
            database: map
            enabled: true
            description: Map
          # LMDB
          - name: lmdb
            database: lmdb
            enabled: true
            description: LMDB
          # MongoDB
          - name: mongodb
            database: mongodb
            enabled: true
            description: MongoDB
          # MySQL
          - name: mysql
            database: mysql
            enabled: true
            description: MySQL
          # Neo4j
          - name: neo4j
            database: neo4j
            enabled: true
            description: Neo4j
          # Postgres
          - name: postgres
            database: postgres
            enabled: true
            description: Postgres
          # Redb
          - name: redb
            database: redb
            enabled: false
            description: ReDB
            skipped: ReDB benchmark skipped due to excessive benchmark time
          # Redis
          - name: redis
            database: redis
            enabled: true
            description: Redis
          # RocksDB
          - name: rocksdb
            database: rocksdb
            enabled: true
            description: RocksDB
          # Scylladb
          - name: scylladb
            database: scylladb
            enabled: false
            description: ScyllaDB
            skipped: ScyllaDB benchmark not yet implemented
          # SQLite
          - name: sqlite
            database: sqlite
            enabled: true
            description: SQLite
          # SurrealDB + Memory
          - name: surrealdb-memory
            database: surrealdb-memory
            enabled: true
            description: SurrealDB with in-memory storage
          # SurrealDB + RocksDB
          - name: surrealdb-rocksdb
            database: surrealdb-rocksdb
            enabled: true
            description: SurrealDB with RocksDB storage
          # SurrealDB + SurrealKV
          - name: surrealdb-surrealkv
            database: surrealdb-surrealkv
            enabled: true
            description: SurrealDB with SurrealKV storage
          # SurrealDB Memory Engine
          - name: surrealdb-embedded-memory
            database: surrealdb
            enabled: true
            endpoint: -e memory
            description: SurrealDB embedded with in-memory storage
          # SurrealDB RocksDB Engine
          - name: surrealdb-embedded-rocksdb
            database: surrealdb
            enabled: true
            endpoint: -e rocksdb:/tmp/rocksdb-engine
            description: SurrealDB embedded with RocksDB storage
          # SurrealDB SurrealKV Engine
          - name: surrealdb-embedded-surrealkv
            database: surrealdb
            enabled: true
            endpoint: -e surrealkv:/tmp/surrealkv-engine
            description: SurrealDB embedded with in-SurrealKV storage
          # SurrealKV
          - name: surrealkv
            database: surrealkv
            enabled: true
            description: SurrealKV
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/artifacts
          merge-multiple: true

      - name: Set file permissions
        run: chmod +x ${{ github.workspace }}/artifacts/crud-bench

      - name: ${{ matrix.skipped || 'Benchmark processing' }}
        if: ${{ !matrix.enabled }}
        run: echo "${{ matrix.skipped }}"

      - name: Run benchmarks (${{ github.event.inputs.samples }} samples / ${{ github.event.inputs.clients }} clients / ${{ github.event.inputs.threads }} threads / key ${{ github.event.inputs.key-type }} / random)
        timeout-minutes: 360
        if: ${{ matrix.enabled && ( github.event.inputs.datastore == 'all' || contains(matrix.name, github.event.inputs.datastore) ) && (success() || failure()) }}
        run: ${{ github.workspace }}/artifacts/crud-bench -d ${{ matrix.database }} ${{ matrix.endpoint || '' }} -s ${{ github.event.inputs.samples }} -c ${{ github.event.inputs.clients }} -t ${{ github.event.inputs.threads }} -k ${{ github.event.inputs.key-type }} -n benchmark -r
        env:
          CRUD_BENCH_LMDB_DATABASE_SIZE: 32212254720 # 30 GiB
          CRUD_BENCH_VALUE: ${{ github.event.inputs.value }}

      - name: Upload result artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.enabled && ( github.event.inputs.datastore == 'all' || contains(matrix.name, github.event.inputs.datastore) ) && (success() || failure()) }}
        with:
          name: results ${{ matrix.name }}
          path: |
            result*.json
            result*.csv

      - name: Finish benchmarking
        run: echo "Complete"
        if: success() || failure()
